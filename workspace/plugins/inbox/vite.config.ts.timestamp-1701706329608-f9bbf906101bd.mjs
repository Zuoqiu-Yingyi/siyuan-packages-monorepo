// vite.config.ts
import deepmerge from "file:///D:/Sync/GitHub/siyuan-packages-monorepo/workspace/node_modules/.pnpm/deepmerge@4.3.1/node_modules/deepmerge/dist/cjs.js";
import { defineConfig as defineConfig2 } from "file:///D:/Sync/GitHub/siyuan-packages-monorepo/workspace/node_modules/.pnpm/vite@5.0.5_less@4.2.0/node_modules/vite/dist/node/index.js";

// vite.share.config.ts
import { defineConfig } from "file:///D:/Sync/GitHub/siyuan-packages-monorepo/workspace/node_modules/.pnpm/vite@5.0.5_less@4.2.0/node_modules/vite/dist/node/index.js";
import { resolve } from "node:path";
import { svelte } from "file:///D:/Sync/GitHub/siyuan-packages-monorepo/workspace/node_modules/.pnpm/@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.5/node_modules/@sveltejs/vite-plugin-svelte/src/index.js";
import { less } from "file:///D:/Sync/GitHub/siyuan-packages-monorepo/workspace/node_modules/.pnpm/svelte-preprocess-less@0.4.0/node_modules/svelte-preprocess-less/out/index.js";
var __vite_injected_original_dirname = "D:\\Sync\\GitHub\\siyuan-packages-monorepo\\workspace\\plugins\\inbox";
var vite_share_config_default = defineConfig({
  base: `./`,
  plugins: [
    svelte({
      preprocess: {
        style: less()
      }
    })
  ],
  resolve: {
    alias: {
      "~": resolve(__vite_injected_original_dirname, "./"),
      "@": resolve(__vite_injected_original_dirname, "./src")
    }
  },
  build: {
    minify: true,
    // sourcemap: "inline",
    emptyOutDir: false,
    copyPublicDir: false,
    rollupOptions: {
      external: [
        "siyuan",
        /^@electron\/.*$/
      ],
      output: {
        entryFileNames: (entryInfo) => {
          switch (entryInfo.name) {
            default:
              return "assets/[name]-[hash].js";
          }
        },
        chunkFileNames: (chunkInfo) => {
          switch (chunkInfo.name) {
            default:
              return "chunks/[name]-[hash].js";
          }
        },
        assetFileNames: (assetInfo) => {
          switch (assetInfo.name) {
            default:
              return "assets/[name]-[hash][extname]";
          }
        }
      }
    }
  }
});

// vite.plugin.config.ts
import "file:///D:/Sync/GitHub/siyuan-packages-monorepo/workspace/node_modules/.pnpm/vite@5.0.5_less@4.2.0/node_modules/vite/dist/node/index.js";
import { resolve as resolve2 } from "node:path";
var __vite_injected_original_dirname2 = "D:\\Sync\\GitHub\\siyuan-packages-monorepo\\workspace\\plugins\\inbox";
var vite_plugin_config_default = {
  plugins: [],
  build: {
    emptyOutDir: true,
    copyPublicDir: true,
    lib: {
      entry: resolve2(__vite_injected_original_dirname2, "src/index.ts"),
      fileName: "index",
      formats: ["cjs"]
    },
    rollupOptions: {
      input: {
        index: resolve2(__vite_injected_original_dirname2, "src/index.ts")
      },
      output: {
        entryFileNames: (chunkInfo) => {
          switch (chunkInfo.name) {
            case "index":
              return "[name].js";
            default:
              return "assets/[name]-[hash].js";
          }
        },
        assetFileNames: (assetInfo) => {
          switch (assetInfo.name) {
            case "style.css":
            case "index.css":
              return "index.css";
            default:
              return "assets/[name]-[hash][extname]";
          }
        }
      }
    }
  }
};

// vite.apps.config.ts
import "file:///D:/Sync/GitHub/siyuan-packages-monorepo/workspace/node_modules/.pnpm/vite@5.0.5_less@4.2.0/node_modules/vite/dist/node/index.js";
import { resolve as resolve3 } from "node:path";
import vue from "file:///D:/Sync/GitHub/siyuan-packages-monorepo/workspace/node_modules/.pnpm/@vitejs+plugin-vue@4.5.1_vite@5.0.5_vue@3.3.10/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import { viteStaticCopy } from "file:///D:/Sync/GitHub/siyuan-packages-monorepo/workspace/node_modules/.pnpm/vite-plugin-static-copy@0.16.0_vite@5.0.5/node_modules/vite-plugin-static-copy/dist/index.js";
var __vite_injected_original_dirname3 = "D:\\Sync\\GitHub\\siyuan-packages-monorepo\\workspace\\plugins\\inbox";
var vite_apps_config_default = {
  plugins: [
    vue({
      template: {
        compilerOptions: {
          // REF: https://www.npmjs.com/package/vue-advanced-chat#vue
          isCustomElement: (tag) => {
            switch (tag) {
              case "vue-advanced-chat":
              case "emoji-picker":
                return true;
              default:
                return false;
            }
          }
        }
      }
    }),
    viteStaticCopy({
      targets: [
        /* emoji-picker-element-data */
        {
          src: "./node_modules/emoji-picker-element-data/zh/cldr/data.json",
          dest: "./libs/emoji-picker-element-data/zh-Hans/cldr/"
          // rename: "data.json",
        },
        {
          src: "./node_modules/emoji-picker-element-data/zh-hant/cldr/data.json",
          dest: "./libs/emoji-picker-element-data/zh-Hant/cldr/"
          // rename: "data.json",
        },
        {
          src: "./node_modules/emoji-picker-element-data/en/cldr/data.json",
          dest: "./libs/emoji-picker-element-data/en/cldr/"
          // rename: "data.json",
        }
      ]
    })
  ],
  build: {
    rollupOptions: {
      input: {
        inbox: resolve3(__vite_injected_original_dirname3, "./apps/inbox.html")
      }
    }
  }
};

// vite.config.ts
var vite_config_default = defineConfig2(async (env) => {
  var config;
  switch (env.mode) {
    case "apps":
      config = deepmerge.all([vite_share_config_default, vite_apps_config_default]);
      break;
    case "plugin":
    default:
      config = deepmerge.all([vite_share_config_default, vite_plugin_config_default]);
      break;
  }
  return config;
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
